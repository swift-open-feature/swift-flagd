//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: flagd/evaluation/v1/evaluation.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service defines the exposed rpcs of flagd
///
/// Usage: instantiate `Flagd_Evaluation_V1_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Flagd_Evaluation_V1_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? { get }

  func resolveAll(
    _ request: Flagd_Evaluation_V1_ResolveAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveAllRequest, Flagd_Evaluation_V1_ResolveAllResponse>

  func resolveBoolean(
    _ request: Flagd_Evaluation_V1_ResolveBooleanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveBooleanRequest, Flagd_Evaluation_V1_ResolveBooleanResponse>

  func resolveString(
    _ request: Flagd_Evaluation_V1_ResolveStringRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveStringRequest, Flagd_Evaluation_V1_ResolveStringResponse>

  func resolveFloat(
    _ request: Flagd_Evaluation_V1_ResolveFloatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveFloatRequest, Flagd_Evaluation_V1_ResolveFloatResponse>

  func resolveInt(
    _ request: Flagd_Evaluation_V1_ResolveIntRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveIntRequest, Flagd_Evaluation_V1_ResolveIntResponse>

  func resolveObject(
    _ request: Flagd_Evaluation_V1_ResolveObjectRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveObjectRequest, Flagd_Evaluation_V1_ResolveObjectResponse>

  func eventStream(
    _ request: Flagd_Evaluation_V1_EventStreamRequest,
    callOptions: CallOptions?,
    handler: @escaping (Flagd_Evaluation_V1_EventStreamResponse) -> Void
  ) -> ServerStreamingCall<Flagd_Evaluation_V1_EventStreamRequest, Flagd_Evaluation_V1_EventStreamResponse>
}

extension Flagd_Evaluation_V1_ServiceClientProtocol {
  internal var serviceName: String {
    return "flagd.evaluation.v1.Service"
  }

  /// Unary call to ResolveAll
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveAll(
    _ request: Flagd_Evaluation_V1_ResolveAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveAllRequest, Flagd_Evaluation_V1_ResolveAllResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveAllInterceptors() ?? []
    )
  }

  /// Unary call to ResolveBoolean
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveBoolean.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveBoolean(
    _ request: Flagd_Evaluation_V1_ResolveBooleanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveBooleanRequest, Flagd_Evaluation_V1_ResolveBooleanResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveBoolean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveBooleanInterceptors() ?? []
    )
  }

  /// Unary call to ResolveString
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveString.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveString(
    _ request: Flagd_Evaluation_V1_ResolveStringRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveStringRequest, Flagd_Evaluation_V1_ResolveStringResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveStringInterceptors() ?? []
    )
  }

  /// Unary call to ResolveFloat
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveFloat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveFloat(
    _ request: Flagd_Evaluation_V1_ResolveFloatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveFloatRequest, Flagd_Evaluation_V1_ResolveFloatResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveFloat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveFloatInterceptors() ?? []
    )
  }

  /// Unary call to ResolveInt
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveInt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveInt(
    _ request: Flagd_Evaluation_V1_ResolveIntRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveIntRequest, Flagd_Evaluation_V1_ResolveIntResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveInt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveIntInterceptors() ?? []
    )
  }

  /// Unary call to ResolveObject
  ///
  /// - Parameters:
  ///   - request: Request to send to ResolveObject.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resolveObject(
    _ request: Flagd_Evaluation_V1_ResolveObjectRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Flagd_Evaluation_V1_ResolveObjectRequest, Flagd_Evaluation_V1_ResolveObjectResponse> {
    return self.makeUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveObjectInterceptors() ?? []
    )
  }

  /// Server streaming call to EventStream
  ///
  /// - Parameters:
  ///   - request: Request to send to EventStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func eventStream(
    _ request: Flagd_Evaluation_V1_EventStreamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Flagd_Evaluation_V1_EventStreamResponse) -> Void
  ) -> ServerStreamingCall<Flagd_Evaluation_V1_EventStreamRequest, Flagd_Evaluation_V1_EventStreamResponse> {
    return self.makeServerStreamingCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Flagd_Evaluation_V1_ServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Flagd_Evaluation_V1_ServiceNIOClient")
internal final class Flagd_Evaluation_V1_ServiceClient: Flagd_Evaluation_V1_ServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the flagd.evaluation.v1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Flagd_Evaluation_V1_ServiceNIOClient: Flagd_Evaluation_V1_ServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the flagd.evaluation.v1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service defines the exposed rpcs of flagd
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Flagd_Evaluation_V1_ServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? { get }

  func makeResolveAllCall(
    _ request: Flagd_Evaluation_V1_ResolveAllRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveAllRequest, Flagd_Evaluation_V1_ResolveAllResponse>

  func makeResolveBooleanCall(
    _ request: Flagd_Evaluation_V1_ResolveBooleanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveBooleanRequest, Flagd_Evaluation_V1_ResolveBooleanResponse>

  func makeResolveStringCall(
    _ request: Flagd_Evaluation_V1_ResolveStringRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveStringRequest, Flagd_Evaluation_V1_ResolveStringResponse>

  func makeResolveFloatCall(
    _ request: Flagd_Evaluation_V1_ResolveFloatRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveFloatRequest, Flagd_Evaluation_V1_ResolveFloatResponse>

  func makeResolveIntCall(
    _ request: Flagd_Evaluation_V1_ResolveIntRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveIntRequest, Flagd_Evaluation_V1_ResolveIntResponse>

  func makeResolveObjectCall(
    _ request: Flagd_Evaluation_V1_ResolveObjectRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveObjectRequest, Flagd_Evaluation_V1_ResolveObjectResponse>

  func makeEventStreamCall(
    _ request: Flagd_Evaluation_V1_EventStreamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Flagd_Evaluation_V1_EventStreamRequest, Flagd_Evaluation_V1_EventStreamResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flagd_Evaluation_V1_ServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Flagd_Evaluation_V1_ServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeResolveAllCall(
    _ request: Flagd_Evaluation_V1_ResolveAllRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveAllRequest, Flagd_Evaluation_V1_ResolveAllResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveAllInterceptors() ?? []
    )
  }

  internal func makeResolveBooleanCall(
    _ request: Flagd_Evaluation_V1_ResolveBooleanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveBooleanRequest, Flagd_Evaluation_V1_ResolveBooleanResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveBoolean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveBooleanInterceptors() ?? []
    )
  }

  internal func makeResolveStringCall(
    _ request: Flagd_Evaluation_V1_ResolveStringRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveStringRequest, Flagd_Evaluation_V1_ResolveStringResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveStringInterceptors() ?? []
    )
  }

  internal func makeResolveFloatCall(
    _ request: Flagd_Evaluation_V1_ResolveFloatRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveFloatRequest, Flagd_Evaluation_V1_ResolveFloatResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveFloat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveFloatInterceptors() ?? []
    )
  }

  internal func makeResolveIntCall(
    _ request: Flagd_Evaluation_V1_ResolveIntRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveIntRequest, Flagd_Evaluation_V1_ResolveIntResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveInt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveIntInterceptors() ?? []
    )
  }

  internal func makeResolveObjectCall(
    _ request: Flagd_Evaluation_V1_ResolveObjectRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Flagd_Evaluation_V1_ResolveObjectRequest, Flagd_Evaluation_V1_ResolveObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveObjectInterceptors() ?? []
    )
  }

  internal func makeEventStreamCall(
    _ request: Flagd_Evaluation_V1_EventStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Flagd_Evaluation_V1_EventStreamRequest, Flagd_Evaluation_V1_EventStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Flagd_Evaluation_V1_ServiceAsyncClientProtocol {
  internal func resolveAll(
    _ request: Flagd_Evaluation_V1_ResolveAllRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveAllResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveAllInterceptors() ?? []
    )
  }

  internal func resolveBoolean(
    _ request: Flagd_Evaluation_V1_ResolveBooleanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveBooleanResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveBoolean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveBooleanInterceptors() ?? []
    )
  }

  internal func resolveString(
    _ request: Flagd_Evaluation_V1_ResolveStringRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveStringResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveString.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveStringInterceptors() ?? []
    )
  }

  internal func resolveFloat(
    _ request: Flagd_Evaluation_V1_ResolveFloatRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveFloatResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveFloat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveFloatInterceptors() ?? []
    )
  }

  internal func resolveInt(
    _ request: Flagd_Evaluation_V1_ResolveIntRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveIntResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveInt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveIntInterceptors() ?? []
    )
  }

  internal func resolveObject(
    _ request: Flagd_Evaluation_V1_ResolveObjectRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Flagd_Evaluation_V1_ResolveObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveObject.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResolveObjectInterceptors() ?? []
    )
  }

  internal func eventStream(
    _ request: Flagd_Evaluation_V1_EventStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Flagd_Evaluation_V1_EventStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Flagd_Evaluation_V1_ServiceClientMetadata.Methods.eventStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Flagd_Evaluation_V1_ServiceAsyncClient: Flagd_Evaluation_V1_ServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Flagd_Evaluation_V1_ServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'resolveAll'.
  func makeResolveAllInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveAllRequest, Flagd_Evaluation_V1_ResolveAllResponse>]

  /// - Returns: Interceptors to use when invoking 'resolveBoolean'.
  func makeResolveBooleanInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveBooleanRequest, Flagd_Evaluation_V1_ResolveBooleanResponse>]

  /// - Returns: Interceptors to use when invoking 'resolveString'.
  func makeResolveStringInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveStringRequest, Flagd_Evaluation_V1_ResolveStringResponse>]

  /// - Returns: Interceptors to use when invoking 'resolveFloat'.
  func makeResolveFloatInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveFloatRequest, Flagd_Evaluation_V1_ResolveFloatResponse>]

  /// - Returns: Interceptors to use when invoking 'resolveInt'.
  func makeResolveIntInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveIntRequest, Flagd_Evaluation_V1_ResolveIntResponse>]

  /// - Returns: Interceptors to use when invoking 'resolveObject'.
  func makeResolveObjectInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_ResolveObjectRequest, Flagd_Evaluation_V1_ResolveObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'eventStream'.
  func makeEventStreamInterceptors() -> [ClientInterceptor<Flagd_Evaluation_V1_EventStreamRequest, Flagd_Evaluation_V1_EventStreamResponse>]
}

internal enum Flagd_Evaluation_V1_ServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "flagd.evaluation.v1.Service",
    methods: [
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveAll,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveBoolean,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveString,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveFloat,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveInt,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.resolveObject,
      Flagd_Evaluation_V1_ServiceClientMetadata.Methods.eventStream,
    ]
  )

  internal enum Methods {
    internal static let resolveAll = GRPCMethodDescriptor(
      name: "ResolveAll",
      path: "/flagd.evaluation.v1.Service/ResolveAll",
      type: GRPCCallType.unary
    )

    internal static let resolveBoolean = GRPCMethodDescriptor(
      name: "ResolveBoolean",
      path: "/flagd.evaluation.v1.Service/ResolveBoolean",
      type: GRPCCallType.unary
    )

    internal static let resolveString = GRPCMethodDescriptor(
      name: "ResolveString",
      path: "/flagd.evaluation.v1.Service/ResolveString",
      type: GRPCCallType.unary
    )

    internal static let resolveFloat = GRPCMethodDescriptor(
      name: "ResolveFloat",
      path: "/flagd.evaluation.v1.Service/ResolveFloat",
      type: GRPCCallType.unary
    )

    internal static let resolveInt = GRPCMethodDescriptor(
      name: "ResolveInt",
      path: "/flagd.evaluation.v1.Service/ResolveInt",
      type: GRPCCallType.unary
    )

    internal static let resolveObject = GRPCMethodDescriptor(
      name: "ResolveObject",
      path: "/flagd.evaluation.v1.Service/ResolveObject",
      type: GRPCCallType.unary
    )

    internal static let eventStream = GRPCMethodDescriptor(
      name: "EventStream",
      path: "/flagd.evaluation.v1.Service/EventStream",
      type: GRPCCallType.serverStreaming
    )
  }
}

